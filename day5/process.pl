#!/usr/bin/perl

use strict;
use warnings;

my $input = '3,225,1,225,6,6,1100,1,238,225,104,0,1101,78,5,225,1,166,139,224,101,-74,224,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1002,136,18,224,101,-918,224,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1001,83,84,224,1001,224,-139,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1102,55,20,225,1101,53,94,225,2,217,87,224,1001,224,-2120,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,102,37,14,224,101,-185,224,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,1101,8,51,225,1102,46,15,225,1102,88,87,224,1001,224,-7656,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1101,29,28,225,1101,58,43,224,1001,224,-101,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1101,93,54,225,101,40,191,224,1001,224,-133,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,40,79,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,226,677,224,1002,223,2,223,1005,224,329,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,344,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,359,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,404,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,419,101,1,223,223,107,677,226,224,1002,223,2,223,1006,224,434,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,449,101,1,223,223,1107,226,226,224,1002,223,2,223,1005,224,464,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,479,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,494,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,509,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,524,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,539,1001,223,1,223,108,677,226,224,102,2,223,223,1006,224,554,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,569,1001,223,1,223,8,677,677,224,1002,223,2,223,1005,224,584,1001,223,1,223,7,677,677,224,1002,223,2,223,1005,224,599,101,1,223,223,1108,226,226,224,102,2,223,223,1006,224,614,101,1,223,223,1008,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,644,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,659,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226';


#my $input = '3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9';

my @program;
my $PC;
my $JUMPED_FLAG = 0;
initialise_program();

my $OPS =
{
	'1' => sub
	{
		my ($op, $a, $b, $position) = @_;
		$program[$position] =
			param_value($a,$op->{'1_mode'})
			+
			param_value($b, $op->{'2_mode'});

	},
	'2' => sub 
	{
		my ($op, $a, $b, $position) = @_;
		$program[$position] =
			param_value($a,$op->{'1_mode'})
			*
			param_value($b, $op->{'2_mode'});

	},
	'3' => sub { my ($op, $position) = @_; print "> "; $a = <STDIN>;  $program[$position] = $a; },
	'4' => sub { my ($op, $position) = @_; $a = $program[$position]; print "*** $a\n"; },
	'5' => sub
	{
		my ($op, $a, $b) = @_;
		if (param_value($a, $op->{'1_mode'}) != 0)
		{
			$PC = param_value($b, $op->{'2_mode'});
			$JUMPED_FLAG = 1;
		}
	},
	'6' => sub
	{
		my ($op, $a, $b) = @_;
		if (param_value($a, $op->{'1_mode'}) == 0)
		{
			$PC = param_value($b, $op->{'2_mode'});
			$JUMPED_FLAG = 1;
		}
	},
	'7' => sub
	{
		my ($op, $a, $b, $position) = @_;

		my $value = 0;
		$value = 1 if param_value($a,$op->{'1_mode'}) < param_value($b, $op->{'2_mode'});
		$program[$position] = $value;
	},
	'8' => sub
	{
		my ($op, $a, $b, $position) = @_;

		my $value = 0;
		$value = 1 if param_value($a,$op->{'1_mode'}) == param_value($b, $op->{'2_mode'});
		$program[$position] = $value;
	},
	

};


my $PARAM_COUNTS =
{
	1 => 3,
	2 => 3,
	3 => 1,
	4 => 1,
	5 => 2,
	6 => 2,
	7 => 3,
	8 => 3,
	99 => 0
};

execute_program();

sub param_value
{
	my ($value, $mode) = @_;

	if ($mode == 1)
	{
		return $value;
	}
	return $program[$value];
}

sub initialise_program
{
	@program = split(',',$input);
	$PC = 0;

	print STDERR join(',',@program) . "\n";
}

sub execute_program
{
	while ($program[$PC] != '99')
	{
		operate();
	}
}


sub step_PC
{
	my ($op) = @_;

	if ($JUMPED_FLAG)
	{
		print STDERR "jumped to $PC, not stepping\n";
		$JUMPED_FLAG = 0;
		return;
	}

	my $step = $PARAM_COUNTS->{$op->{code}}+1;

	$PC += $step;

	print STDERR "Stepping $step to $PC\n";
}

sub get_op
{
	my $opcode = $program[$PC];

	my @digits = split(//, sprintf("%05d",$opcode));

	if (scalar @{digits} == 5)
	{
		return
		{
			code => int($digits[3] . $digits[4]),
			'1_mode' => $digits[2],
			'2_mode' => $digits[1],
			'3_mode' => $digits[0],
		}
	}

	die "Problem getting OP $opcode ($PC)\n";
}

sub get_params
{
	my ($op) = @_;

	my $param_count = $PARAM_COUNTS->{$op->{code}};

	my @params = ();

	foreach my $param_number (1 .. $param_count)
	{
		my $param = $program[$PC+$param_number];
		push @params, $param;
	}
	return @params;
}


sub operate
{
	my $op = get_op();

use Data::Dumper;
print STDERR Dumper $op;

	my $opcode = $op->{code};
	die "Unexpected opcode $opcode\n" unless valid_opcode($opcode);

	my @params = get_params($op);

	print STDERR "Executing at $PC: " . $op->{code} . ' ' . join(',',@params) . "\n";

	execute_op($op->{code}, $op, @params);
	step_PC($op);
}

sub execute_op
{
	my ($opcode, @params) = @_;


	&{$OPS->{$opcode}}(@params);
}

sub valid_opcode
{
	my ($opcode) = @_;

	return 1 if $OPS->{$opcode};
	return 0;
}



